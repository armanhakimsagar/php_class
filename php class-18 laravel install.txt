Command line :

* composer         (for check)

* shift + right click for cmd open

* cd C:\xampp\htdocs     (Change directory same driver: 
                         just cd then path)

* cd /d E:\full_bitopew  (cd then /d the path change 
                         directory with other driver)

* cd \                  (go root)

* cd ..\		(go back)

* cd foldername\	(access)




Via Laravel Installer:

-> download latest version of xampp for latest php version

-> https://getcomposer.org/ its a dependency manager of php

-> download composer from getcomposer.com

-> install location must be xampp\php\php.exe

-> composer global require "laravel/installer"


Via Composer Create-Project:

-> composer create-project --prefer-dist laravel/laravel blog

-> hit localhost/projectname/public


-> cut .htacess file from public and paste 
  
   into root & make server.php to index.php


-> php artisan (it will show all commad)

-> php artisan --version (show verison)

-> php artisan env   (set APP_ENV value in .env)   (show current environment)

-> php artisan down (Maintenance Mode)

-> customizedown template location 

   storage/framework/views/4b0f7ed3af39610faa475bc7e9037d47933052f0.php

-> php artisan up
   
-> php artisan serve 

-> php artisan view:clear     (remove all complied error view in storage/framework/views | 404 error)


** laravel life circle : https://www.google.com/search?q=laravel+life+cycle&client=firefox-b-d&sxsrf=ACYBGNRl5lSJDK2eRrTuqnIU6xHOvnrdmw:1570548820367&tbm=isch&source=iu&ictx=1&fir=he_3iPPkhrcGNM%253A%252C4vkhHb5xFj5qqM%252C_&vet=1&usg=AI4_-kQfZ4VI9XP9RKXtWCpoZffthD2yqQ&sa=X&ved=2ahUKEwjEj6mk_ozlAhXRfisKHdgdDIoQ9QEwAXoECAgQBg#imgrc=he_3iPPkhrcGNM:&vet=1

** mvc structure : 





desciption ->


   serve :

   for run the project from remote location
   can not change the location or file name of server.php or .htaccess
   for run application http://localhost:8000/


   cache :

   To give your application a speed boost, 
   you should cache all of your configuration files into a single file


   



 KEYWORD :







* namespace route : access folder for controller

* prefix route : need to add this before route

* closer - type hinting

* middleware - checkpost . run after every url request.

* karnel - after create register middleware here.

			 have 3 part : 

			 protected middleware: hit all route 
		 
			 route middlware : hit only specific route 	


* php artisan serve : for run the project from remote location

* public directory : contain htaccess. index.php autoload all function.

* Application Key : php artisan key:generate command . use for sessions and other encrypted data be secure!

* @section directive : as the name implies, defines a section of content,

* @yield directive is used to display the contents of a given section

* MIMES - MIME (Multi-Purpose Internet Mail Extensions) is an extension of the original 
          Internet e-mail protocol that lets people use the protocol to exchange 
		  different kinds of data files on the Internet: audio, video, images, 
		  application programs, and other kinds,

* config/app - where we can register our own provider.

* config/auth.php - register your authentication here.

* service container - Service providers are the central place to configure your service provider. service container is collection of built in provider . location config/app.php.
		   
* serive provider - Service providers are the central place to configure your own class	   

* app service provider - laravel have build in service provider. you can overwrite here all there build in service provider. boot is overwrite register is for register new service provider.registering things, including registering service container bindings, event listeners, middleware, and even routes. Service providers are the central place to configure your application.

* facade - facade is simple method to access complicated class. view route 

* Schema::defaultStringLength(191) - Laravel uses the utf8mb4 character set by default, which includes support for storing "emojis" in the database. If you are running a version of MySQL older than the 5.7.7 release or MariaDB older than the 10.2.2 release, you may need to manually configure the default string length generated by migrations in order for MySQL to create indexes for them. You may configure this by calling the  Schema::defaultStringLength method within your AppServiceProvider

* seeder - 

	use for insert demo data in database. large amount 30 
	
	php artisan make:seeder UsersTableSeeder
	
	for insert : php artisan db:seed

	
* dask - laravel dask act like javascript event & selector. you can do all js onmouseover or bla bla here in php way.
          that means it will load browser then it will work.

          https://www.youtube.com/watch?v=V75hPsS6cvk

* redis - database store . support nosql

* scout - use for search pakage. it use angolia search system.

* cashier - use for payment getway pakage

* elequest vs query builder - 

                         elequnt like active record. secuire but slow. no need to learn sql
						 query builder is fast. best for sql user.
 

* maiable - class for send mail

* factory - its a function which have object name faker. use for generate random data & Seed will insert this data.

 Factory | Seed | Faker 

   * factory is for generate fake data & faker is a object of facetory.

   * php artisan make:factory ModelNameFacetory --model=ModelName (ModelName here is in which table we want to insert data)
   
   * It will generate a folder in confiq/database/factory
   
   return [
	
		'name' => 		$faker->name,
        'email' => 		$faker->email,
        'password' => 	bcrypt('secret'),
						$faker->randomDigit;
						$faker->numberBetween(1,100);
						$faker->word;
						$faker->paragraph;
						$faker->lastName;
						$faker->city;
						$faker->year;
						$faker->domainName;
						$faker->creditCardNumber;
						$faker->region;
						$faker->bankAccountNumber;
						$faker->cellNumber;
   ]

* notification - its a class . can create & call when a out come need of any work. have mail or sms notification.

* session - configure in config/session.php .  sessions are stored in storage/framework/sessions

* passport - api create package

* policy 

* request - where we make rule

* autoload :

	in composer.json 
	
	"autoload":{
	
		// classmap is anything is this namespace
	
		classmap :[
			"app/foldername",
			"app/another_foldername"
		],
		
		// this file will be autooaded
	
		files :[
			"app/filename.php",
		],
	
	}
	
* psr : for autoload a file we can use psr. we can set path in 2 way.

	laravel use psr-4
	
	psr 0 & psr 4 :
	
	1. 	For example if you define that the Acme\Foo\ namespace is anchored in src/,
		with PSR-0 it means it will look for Acme\Foo\Bar in src/Acme/Foo/Bar.php
		while in PSR-4 it will look for it in src/Bar.php.

	2. PSR-4 does not convert underscores to directory separators

	3. You cannot use PSR-4 if you do not use namespaces
	
	
	"psr-4": {
		"namespace\\": "directory"
	}
	
*  composer dump-autoload  :

	1. Composer dump-autoload wonâ€™t download a thing.
	2. It just regenerates the list of all classes that need to be included in the project (autoload_classmap.php).
	3. Ideal for when you have a new class inside your project.
	4. autoload_classmap.php also includes the providers in config/app.php
	
	
*  Session data is stored on the server. 
   A cookie with the session's ID is stored on the user's computer, 
   and is associated with a single domain name. 
   The browser passes this cookie to the server so it knows what session data to associate with the user.
   Two websites, hosted under the same domain, 
   are going to share the same session because there will only be one cookie containing a session ID. 
   If you put the websites under different domains, 
   you will no longer have the problem since two different cookies 
   (containing two different session ID's) will be made on the user's computer; one for each domain name.
   
   
*  Whoops error page

*  chunk vs get

	check -> bring from database data part by part. best for large data.
	
    $flight = App\Flight::all();
	$flight->get();

	get -> get all data from database.
	
	$flight = App\Flight::all();
	App\Flight::chunk(100);
	
	
*   dump() vs dd() :

    dump can set any point but dd will hit over full process.	
 
	dd(App\Flight::where('active', 1)->orderBy('name', 'desc')->take(10)->get());
	
	App\Flight::where('active', 1)->orderBy('name', 'desc')-dump()->take(10)->get();
	
	
*   create command line :

    php artisan make:command SayHello command=say:hello	
	

*  echo : Laravel Echo is a JavaScript library that makes it painless to subscribe to channels and listen for events broadcast by Laravel.
                                                                     
*  event listen : event for pass listern for catch.

* scafholding : The term Scaffolding roughly aims to a quickly set up skeleton for an app or your project.

				The main purpose of Scaffolding is to speed your workflow rather than creating it new. like make auth

* Resourse : for api create

* log file created when error ocured

* Semantic Versioning : github Semantic Versioning means verison 1.1.0 . 
				
						that means a if new version released must need to use it. 
						
						but non semantic gives you option for use old version.
		
						laravel use non sementic Versioning
						
				
* Installing Laravel : First, download the Laravel installer . then create project

* Local Development Server : for access from remote location

* Application Key need for If the application key is not set, your user sessions and other encrypted data will not be secure!

* .env.example for if any one in your group use ur project can set value here

* confiq/app .php  -> contain all classes

*  Routes ->

			web.php (all route list)
			
			api.php (set middleware here)
			
			
* soft delete is nothing but deleted_at column

* auto load any class

 {
    "autoload": {
        "classmap": [
            "database"
        ],
        "psr-4": {
            "App\\": "app/"
        }
    }
 }
 
 
 composer dump-autoload
 
 
 
* Lumen is PHP micro framework that built on Laravelâ€™s top components

* csrftoken verify in app/http/middleware/csrf_token . turn off from there if you want.

  without csrf origin of that data is not. 
  
  
* function(Request $request)  [Request is here typehint $request is object]

* vendor folder contain all package

* ORM : Object-relational Mapping (ORM) is a programming technique for converting data between incompatible type systems in object-oriented programming languages.
  
        Its a model for connect oop with database & other program
		
* Laravelâ€™s Eloquent ORM is one the most popular PHP ORM (OBJECT RELATIONSHIP MAPPING).
 
  It provides a beautiful, simple ActiveRecord implementation to work with your database.		
  
  elequent orm is model for connect with database.
  
* PSR-4 is autoloading standard. laravel use it.

   app/http/controller
   
* in apps folder we have middleware controller model

* The Console Directory have all php artisan commad for us

* The Http directory contains your controllers, middleware, and form requests.

* The Providers directory contains all of the service providers for your application. Service providers bootstrap your application by binding services

* Cross-site request forgery, also known as one-click attack or session riding and abbreviated as CSRF

* <meta name="csrf-token" content="{{ csrf_token() }}"> for use csrf for full page

* Lifecycle Overview :


1. The Loading Steps :

	* first load public/index.php This file loads vendor/autoload.php , bootstrap/app.php

	
		* bootstrap/app.php bind kernels into the service container,
	  
		  because its incoming requests to this application from both the web and CLI
	
			*The kernel will receive the request, load the service providers and will be redirected to router.
			
			 (Any Service Providers you've created or linked into your application are loaded early in the boot process,
			
			 after boot method it load register method)
			 
			 
			
		* vendor/autoload.php load composer/autoload_real.php for run composer.json

		

index.php -> 	1. vendor/autoload.php

					-> composer.json

				2. bootstrap/app.php
				
					-> kernel.php
					
						-> service providers
						
							-> route.php
							
							-> disputch
							
							
* The App\Exceptions\Handler class is where all exceptions triggered by your application are logged 

* custom log file :

	app/congiq.php

   'log' => env('APP_LOG', 'daily'),  [create seperate log file for daily wise]
   
   'log' => env('APP_LOG', 'single'),  [create all log file in single file]
   
   
   
   
   'name' => env('APP_NAME', 'Laravel'), [this app name used when initailize with package]
   
   'debug' => env('APP_DEBUG', false),   [for use 404 error turn it false. if true 404 not work]
   
  

	'fallback_locale' => 'en', 			  [its for multi languages, set language is views/resourse/lang]
	
	
	
   
* All exceptions are handled by the App\Exceptions\Handler class

	report method : The report method is used to log exceptions or send them to an external service like Bugsnag or Sentry.
	
	
* vendor language change :

  resources/lang/vendor/vendor_name/en/messages.php
  
  
* php artisan preset none  (use for remove css file. make built in css file empty, for our work)

* guzzle allow http request external
