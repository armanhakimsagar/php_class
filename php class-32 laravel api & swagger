{
  "student_info":[
  	{
	  'name' : 'korim 1',
	  'age'  : 1,
	  'description' : 'korim details'
	},
	{
	  'name' : 'korim 2',
	  'age'  : 2,
	  'description' : 'korim details'
	},
	{
	  'name' : 'korim 3',
	  'age'  : 3,
	  'description' : 'korim details'
	}
  ]
}

validate api data : jsonlint.com

Generate api link from : myjson.com



JWT :::::::::::::::::::::::::::


https://www.youtube.com/watch?v=wImucnZgcUo&list=PLT9miexWCpPW9T33f5dFzkMQldoc5DtQQ&index=9


fetch direct from api data : https://www.youtube.com/watch?v=UciopWMTdUM

https://www.youtube.com/playlist?list=PLCakfctNSHkGQ6S557u-6sLEYsfWje47P

JWT :

JWT Encoding process:

Jwt is a token, when user name & password match we pass this data in jwt package payload function.
It return a token to client as login token.This token contain all related info about login.

JWT Decoding process:









Rest Api:

1. If we work in laravel api.php file, no cookies & session will set
  
   For check use postman : http://echaritybd.com/ or http://echaritybd.com/api/users
   

2. Create API resource for bind easily with crud:

  php artisan make:controller API/PhotoController (api controller)

  Route::Resource('photo','API\PhotoController'); (api route)


3. You can set version :

   Route::group(['prefix' => 'v2'], function(){
		
		Route::Resource('photo','API\PhotoController'); (api route)
		
   });
   
   
4. now check by :  php artisan route:list


5. return User::all();


6. now make a format for view:

	
	$user = user::all();
    
	if(count($user) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ];

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $user
        ];
    }

    return $feedback;
	
	
	
	
	Insert :::::::::::::::::::::
	
	$validator = Validator::make($request->all(), [
	        
		'name'  => 'required'

	]);

	if ($validator->fails()) {

		return response()->json($validator->errors()->toArray(),400);
		
	} 
	
	user = new User;
    $user->data = $request->data;
    $result = $user->save();

    if(count($result) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ];

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ];
    }

    return $feedback;
	
	
	
	** must add 

	protected $fillable = ['fieldname','fieldname']



	Update ::::::::::::::::
	
	
	public function update(Request $request,$id) {

	   $poll = DB::table('aps')
			->where('id',$id)
			->update(array(
				'name'=>$request->name,
			));

	   if($poll == null){
	   
		   $feedback = [
			   'status'     => "error",
			   'message'    => "update error"
			]; 

		}else{
			$feedback = [
			   'status'     => "success",
			   'message'    => "update successfully"
			]; 
		}

		return $feedback;
		
	}
	
	
	
	Delete :::::::::::
	
	
	
	   $poll = DB::table('aps')
		->where('id',$id)
		->delete();

	   if($poll == null){
		   $feedback = [
		   'status'     => "error",
		   'message'    => "delete error"
		]; 

		}else{
			$feedback = [
			   'status'     => "success",
			   'message'    => "delete successfully"
			]; 
		}

		return $feedback;
		
		
	
**  Create a product api for perfect example:

	
	Resource is object (http://api.example.com/cart-management/users/1)
	
    Collection is a collection of object (http://api.example.com/cart-management/users)
	
	Endpoint is something that indecate specific Resource in a collection.
	
	

	Respository create:


	1. Its a layer against model. Its name repository
	
	2. So after create repository pattern dont call model. 
	   You should call repository for CRUD.
	   
	3. So will communicate with repository & repository will communicate with model
	
	4. You can make service for reduce FAT Controller. Its better practise.
	   You can separate common functionality from a fat controller.
	   Its call service
	   
	now create resource:
	
	* php artisan make:resource API/PhotoResource
	  

	
	
	* Now in controller:
	
	use App\Http\Resources\API\PhotoResource;
	use App\Photo;
	
	public function show($id)
    {
        $photo = photo::find(2);
        return new PhotoResource($photo);
    }
	
	* in PhotoResource file:
	
	

	public function toArray($request)
    {
        return [
            'name' => $this->name,
			'total_price' => $this->qty * $this->price,
			'rating' => $this->rating
        ];
    }
	
	Test by : http://localhost:8070/queueTest/public/api/v2/photo/1
	
	
	* now create collection for photo api: 
	
		php artisan make:resource API/PhotoCollection
	
	
	* in controller:
	
	
	use App\Http\Resources\API\PhotoCollection;

	public function index()
    {
        return PhotoCollection::collection(Photo::all());
    }
	
	
	* in collection remove collection from extends & use
	
		use Illuminate\Http\Resources\Json\Resource;

		class PhotoCollection extends Resource
		{
			/**
			 * Transform the resource collection into an array.
			 *
			 * @param  \Illuminate\Http\Request  $request
			 * @return array
			 */
			public function toArray($request)
			{
				return [
					'name' => $this->name
				];
			}
		}
		
	
	* now check by : http://localhost:8070/queueTest/public/api/v2/photo

	
	
	
	
	
	
6. Create pagination in api:

	
    return PhotoCollection::collection(Photo::paginate(4));

    check by: http://localhost:8070/queueTest/public/api/v2/photo?page=3
	
	




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	


* Side loading | one to many relationship:

review table : id title user_id** created_at updated_at
product table: id name password created_at updated_at 

Select all review against single product.
One to many relationship

* In Product model:

  public function Reviews(){
      
	  // if one to one relationship
	  
      return $this->hasOne(Review::class);
  
	  // if one to many relationship
	  
      return $this->hasMany(Review::class);
  }

* In user controller:

  // fetch all post from passes user_id **
  
  public function show($id){
  
      $user = User::find($id)->Reviews;
	  
      $response['user'] = $user;
      
	  return $response;
  
  }
  
  
  
  
  
_________________________________________



File upload API Controller :::::::


$cover_image = $request->file('photo');

$enc_cover_image = time() . '.' . $cover_image->getClientOriginalExtension();

$destinationPath = public_path('files');

$cover_image->move($destinationPath, $enc_cover_image);



API File show :::::::



$response['download'] = public_path('files/'."a.png");

return $response;




::::::::::::::::::::::::::::::::::::::


JWT Library :

1. Its a library for encode & decode json web token.

   Structure: 
   
   Header: Identifies which algorithm is used to generate the signature
   
   Payload: Contains a set of claims. Infomation about login
   
   Signature: The signature is calculated by encoding the header and payload using Base64url Encoding.

   
   
   
2.  download: composer require firebase/php-jwt
	
	in controller :::::::::: 
	
	use Firebase\JWT\JWT;
	
	
	$payload_info = [
    
        'iss' => "localhost",       // issuer server details
        
        'iat' => time(),        // time of issue
        
        'nbf' => time()+10,     // time interval of issue
        
        'eat' => time()+30, // expire time

        'aud' => "my_users",        // audience info
        
            'data'=> array(
                "id"=> 1,
                
                "name"=> "arman",
                
                "email"=> "arman@gmail.com"
            )
        ];
        
        $secret_key = "owt125";		// its salt
        
        $jwt = JWT::encode($payload_info,$secret_key);

        dd($jwt);

	* Token generated successfully.
	  now return $jwt as token value after login.
	

	$data = [
		'status'=>1,
		'_token' => $jwt,
		'message' => 'logged in successfully'
	];

	return $data;





** For testing go to this link & paste jwt token for see details:

https://jwt.io/#debugger-io


** For change algo type go to vendor/firebase/jwt.php.
   All algo list in there.

   & set in here 
   
        $jwt = JWT::encode($payload_info,$secret_key,"HS512");



** now create a middleware. now check header authentication or bearer token in middleware.
   
    check header by: 
	
		dd(getallheaders());

	
	check valid token by:
	
		JWT::decode($jwt_from_header,'123',array('HS512'));
	
	
	
		
** Decode JWT by:

	     
		$jwt = JWT::decode($jwt,$secret_key,array('HS512'));
		
		
		example code:
		
		
		$data = JWT::decode("eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpc3MiOiJsb2NhbGhvc3QiLCJpYXQiOjE1ODU5ODY1MDEsIm5iZiI6MTU4NTk4NjUxMSwiZWF0IjoxNTg1OTg2NTMxLCJhdWQiOiJteV91c2VycyIsImRhdGEiOnsiaWQiOjEsIm5hbWUiOiJhcm1hbiIsImVtYWlsIjoiYXJtYW5AZ21haWwuY29tIn19.RzscKkiRSRi02VcKXW7Zu2A4mfJjpZme_OL6PT526yfXJq7FKyWUrxUn5prm4CoV9qAbLuSKs-xnstTd832DZQ","www123",array('HS512'));

        dd($data);
		
		
		** Check this in separate method
		** also check expired time
		
		
Login API Process ::::::::::::::::





guzzle install for send get & post request with header:

composer require guzzlehttp/guzzle


// first send request with username & password as client for get api token

$url = "http://localhost/test/public/api/user";

$data = ['username'=>'arman','password'=>'123'];

$request = $this->client->post($url,array(
					'content-type' => 'application/json'
				),array());

$request->setBody($data);
			
$response = $request->send();


// in this $response you will get token

// now pass this token with header for get access in dashboard url


$client = new Client(['http_errors' => false]);

$allresponse = $client->request('GET','http://localhost/test/public/api/user/dashboard', [

	'headers' => [
		'Authorization' => $response['token']
	]
	
]);



// now in middleware check your token validity:

dd(getallheaders());

if (200 == 200) {
	return redirect('submit');
}

return redirect('home/33');
		
		
		
___________________________________


INSERT DATA FROM EXTERNAL API & INTO DATABASE :::::::::::::::::::::::::::::::::::

view OR insert into database

	$json = file_get_contents('http://echaritybd.com/api/users');

	$data = json_decode($json,true);

	echo "<pre>";

	print_r($data['data']);
	
	for($i=0;$i< count($data['data']);$i++){
		echo $data['data'][$i]['user_id'];
	}

	exit;

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 
 Oauth:
 
 https://github.com/armanhakimsagar/Oauth
 
 
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 Create API Here  -http://editor.swagger.io/

demo yml : https://gist.github.com/armanhakimsagar/3c733fea95cfa3f68903a12cbfe7d7dc
Then just export -> generate client -> html2 





 
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Theory:


Web serice: 
  
  1. Web service is a standardized medium to propagate communication between the client and server applications on the World Wide Web.
  
  2. The only difference is that a Web service facilitates interaction between two machines over a network. XML
  
API:

  1. The only difference is that a Web service facilitates interaction between two machines over any network.
     JSON,XML

Type of Web Service:

  SOAP web services: 
  	SOAP is based on transferring XML data as SOAP Messages. Soap mainly used for transfer xml data.
	We can make any xml doucment like WSDL (Web services description language) for descripe XML details.
	
	SOAP was to ensure that programs built on different platforms and programming languages could exchange data in an easy manner
  
  	Statefull (web service does in addition to the location of the web service)
	
	No lack of Security
	
	An Envelope element that identifies the XML document as a SOAP message
	A Header element that contains header information
	A Body element that contains call and response information
	A Fault element containing errors and status information
	
  RESTful web services:
  	
	 Restful service would use the normal HTTP verbs of GET, POST, PUT and DELETE for working with the required components
	
	 Stateless

	 Lack of Security
	
	 Representational State Transfer
 
 	 Resource - Collections - URL

   	 resource should always be plural

   	 Sorting, filterning, searching, pagination, version set
	
  SOAP is a protocol whereas REST is an architectural pattern.
  
  WDSL:
  
  Create soap api by wsdl :
  
  
<types>		Defines data types
<message>	Defines the data elements (main message)
<portType>	communication level
<binding>	this is the param for add with soap protocal




Katalon Studio is a free-license tool released in January 2015 with a Selenium-based engine. 
Mostly, Katalon is designed to create and reuse automated test scripts for UI without coding


