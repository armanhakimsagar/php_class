API CREATE FOR USE in get method :::::::

Route::get('userPost', function() {

    $user = user::all();
    if(count($user) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ];

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $user
        ];
    }

    return $feedback;

});



API CREATE FOR single data in get method :::::::

Route::get('departments/{id}', function($id) 

create method for edit




______


INSERT API LINK FOR IN POST METHOD :::::::


Post:

Route::post('userPost', function(Request $request) {

    $user = new User;
    $user->data = $request->data;
    $result = $user->save();

    if(count($result) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ];

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ];
    }

    return $feedback;

});

** must add 

protected $fillable = ['fieldname','fieldname']


______


UPDATE API LINK FOR IN UPDATE METHOD :::::::

Route::put('poll/{id}','control@method')


controller :

public function update(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->update(array(
			'name'=>$request->name,
		));

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "update error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "update successfully"
	]; 
    }

    return $feedback;

}



______



UPDATE API LINK FOR IN DELETE METHOD :::::::


Delete :

Route::delete('poll/{id}','control@method')

controller :

public function delete(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->delete();

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "delete error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "delete successfully"
	]; 
    }

    return $feedback;

}



:::::::::::::::::::::::::::::::


Validation for view (Only apply in edit):

$department = department::find($id);

if(is_null(ap::find($id))){
    $feedback = [
       'status'     => "error",
       'message'    => "data not found",
       'data'       => null
    ]; 
    return $feedback;
}else{
    $feedback = [
       'status'     => "success",
       'message'    => "data found",
       'data'       => ap::find($id)
    ]; 
    return $feedback;
}




:::::::::::::::::::::::::::::::


Validation for insert:


$validator = Validator::make($request->all(), [
	        
    'name'  => 'required'

]);

if ($validator->fails()) {

    return response()->json($validator->errors()->toArray(),400);
    
} else {

    $data = $request->all();
    return ap::create([
        'name' => $data['name']
    ]);

    if(count($data) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ]; 

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ]; 
    }
}




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


CUSTOMIZE SINGLE API RESPONSE DATA:


			    modelname / modelname resource

* php artisan make:resource User / UserResource

in UserResource file:
	
		   
public function toArray($request){

	return [

	'name' => $this->name,

	'stock'	=> count($this->stock) == 0 ? 'out_of_stoke' : $this->stock,

	'href'=> 
		[	
		  'details' => route('products.show',$this->id)
		]

	];
}



in controller :

* use App\Http\Resources\Product\ProductResource;
  
* return new ProductResource($product); 
 




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Side loading | one to many relationship:

side load is load foreign key data in api.
like load all questions of a poll.

in poll model:

public function questions(){
  return hasMany('App\Quesion');
}


in poll controller:

public function show($id){

  $poll = Poll::with('questions')->findOrFail($id);
  $response['poll'] = $poll;
  $response['questions'] = $poll->questions;
  return response->json($response,200);
  
}



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


Paginate API :

department::paginate(10);




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


API File show:

return response->download(asset('imgae/a.png','Show name here'));

see header response for file details.


API File upload:

$image = $request->file('photo')->store('image');

return response()->json(['path' => $path], 200);



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

 
Guzzle Token Check:

************

Client request for access API data:

Route::get('Developerall','DeveloperController@getGuzzleRequest');

---

use GuzzleHttp\Client;

public function getGuzzleRequest(){
	$client = new Client(['http_errors' => false]);
	$allresponse = $client->request('GET','http://localhost/meeting_apps/public/api/departments', [
	    'headers' => [
		'authorization' => "after login set random token here & update token in database"
	    ]
	]);
	$allbody = $allresponse->getBody();
	$all_list = json_decode($allbody->getContents());
	return view('view',compact('all_list'));

}
    
************

Create API & Client auth check:

Use GuzzleHttp\Client;
use Illuminate\Http\Request;

Route::get('departments', function(Request $request) {
    
    $headers = $request->headers->all(); 
    // full array
    
    $pubapi = $request->header('authorization'); 
    // only token
    // now check token exits in table or not
    // if token exits then pass data.
    
    $department = Department::all();
    if(count($department) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ]; 
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $department
        ]; 
    }
    return $department;
});

___

View data :


@foreach($alldata as $alldatas)

    {{ $alldatas['name'] }}
    
@endforeach


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 
 Oauth:
 
 https://github.com/armanhakimsagar/Oauth
 
 
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 Create API Here  -http://editor.swagger.io/

Then just export -> generate client -> html2 

