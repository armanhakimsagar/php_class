API CREATE ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


View:

Route::get('departments', function() {
    
    $department = department::all();
    if(count($department) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ]; 
       
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $department
        ]; 
    }
    
    return $feedback;
    
});


______

Edit:

Route::get('departments/{id}', function($id) 

create method for edit

______

Post:

Route::post('departments', function(Request $request) {

    $data = $request->all();
    
    return ap::create([
        'name' => $data['name']
    ]);

    if(count($data) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ]; 

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ]; 
    }
    
});

** must add 

protected $fillable = ['fieldname','fieldname']


______


Update :

Route::put('poll/{id}','control@method')


controller :

public function update(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->update(array(
			'name'=>$request->name,
		));

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "update error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "update successfully"
	]; 
    }

    return $feedback;

}



______



Delete :


Route::delete('poll/{id}','control@method')

controller :

public function delete(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->delete();

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "delete error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "delete successfully"
	]; 
    }

    return $feedback;

}



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



Validation for view:

$department = department::find($id);

if(is_null(ap::find($id))){
    $feedback = [
       'status'     => "error",
       'message'    => "data not found",
       'data'       => null
    ]; 
    return $feedback;
}else{
    $feedback = [
       'status'     => "success",
       'message'    => "data found",
       'data'       => ap::find($id)
    ]; 
    return $feedback;
}


Validation for insert:


$validator = Validator::make($request->all(), [
	        
    'name'  => 'required'

]);

if ($validator->fails()) {

    return response()->json($validator->errors()->toArray(),400);
    
} else {

    $data = $request->all();
    return ap::create([
        'name' => $data['name']
    ]);

    if(count($data) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ]; 

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ]; 
    }
}




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


CUSTOMIZE SINGLE API RESPONSE DATA:


			    modelname / modelnameCollection

* php artisan make:resource Product / ProductCollection


Show method for single data 

* use App\Http\Resources\Product\ProductResource;
  
* return new ProductResource($product); 
 
 
Customize property of API :
	
		   
public function toArray($request){

	return [

	'name' => $this->name,

	'stock'	=> count($this->stock) == 0 ? 'out_of_stoke' : $this->stock,

	'href'=> 
		[	
		  'details' => route('products.show',$this->id)
		]

	];
}




CUSTOMIZE ALL API RESPONSE DATA:








::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Side loading | one to many relationship:

side load is load foreign key data in api.
like load all questions of a poll.

in poll model:

public function questions(){
  return hasMany('App\Quesion');
}


in poll controller:

public function show($id){

  $poll = Poll::with('questions')->findOrFail($id);
  $response['poll'] = $poll;
  $response['questions'] = $poll->questions;
  return response->json($response,200);
  
}



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


Paginate API :

department::paginate(10);




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


API File show:

return response->download(asset('imgae/a.png','Show name here'));

see header response for file details.


API File upload:

$image = $request->file('photo')->store('image');

return response()->json(['path' => $path], 200);




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


API Token auth:

Middleware:

1. create middleware
2. register it on group route middleware api array


In middleware check handle method:

$token = $request->header('X-API-TOKEN');

if($token != 'My Value'){
   about(401,'token not found');
}
return $next($request);


** check by postman:

1. set header key & value then submit with request.





::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 







