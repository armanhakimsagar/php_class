API CREATE ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


View:

Route::get('departments', function() {
    
    $department = department::all();
    if(count($department) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ]; 
       
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $department
        ]; 
    }
    
    return $feedback;
    
});


______

Edit:

Route::get('departments/{id}', function($id) 

create method for edit

______

Post:

Route::post('departments', function(Request $request) {

    $data = $request->all();
    
    return ap::create([
        'name' => $data['name']
    ]);

    if(count($data) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ]; 

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ]; 
    }
    
});

** must add 

protected $fillable = ['fieldname','fieldname']


______


Update :

Route::put('poll/{id}','control@method')


controller :

public function update(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->update(array(
			'name'=>$request->name,
		));

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "update error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "update successfully"
	]; 
    }

    return $feedback;

}



______



Delete :


Route::delete('poll/{id}','control@method')

controller :

public function delete(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->delete();

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "delete error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "delete successfully"
	]; 
    }

    return $feedback;

}



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



Validation for view:

$department = department::find($id);

if(is_null(ap::find($id))){
    $feedback = [
       'status'     => "error",
       'message'    => "data not found",
       'data'       => null
    ]; 
    return $feedback;
}else{
    $feedback = [
       'status'     => "success",
       'message'    => "data found",
       'data'       => ap::find($id)
    ]; 
    return $feedback;
}


Validation for insert:


$validator = Validator::make($request->all(), [
	        
    'name'  => 'required'

]);

if ($validator->fails()) {

    return response()->json($validator->errors()->toArray(),400);
    
} else {

    $data = $request->all();
    return ap::create([
        'name' => $data['name']
    ]);

    if(count($data) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ]; 

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ]; 
    }
}




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


CUSTOMIZE SINGLE API RESPONSE DATA:


			    modelname / modelnameCollection

* php artisan make:resource Product / ProductCollection


Show method for single data 

* use App\Http\Resources\Product\ProductResource;
  
* return new ProductResource($product); 
 
 
Customize property of API :
	
		   
public function toArray($request){

	return [

	'name' => $this->name,

	'stock'	=> count($this->stock) == 0 ? 'out_of_stoke' : $this->stock,

	'href'=> 
		[	
		  'details' => route('products.show',$this->id)
		]

	];
}




CUSTOMIZE ALL API RESPONSE DATA:


* php artisan make:resource crud/crudCollection

* set in crudCollection:

use Illuminate\Http\Resources\Json\Resource;

class crudCollection extends Resource

* set in method:

crudCollection::collection(crud::all())






::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Side loading | one to many relationship:

side load is load foreign key data in api.
like load all questions of a poll.

in poll model:

public function questions(){
  return hasMany('App\Quesion');
}


in poll controller:

public function show($id){

  $poll = Poll::with('questions')->findOrFail($id);
  $response['poll'] = $poll;
  $response['questions'] = $poll->questions;
  return response->json($response,200);
  
}



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


Paginate API :

department::paginate(10);




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


API File show:

return response->download(asset('imgae/a.png','Show name here'));

see header response for file details.


API File upload:

$image = $request->file('photo')->store('image');

return response()->json(['path' => $path], 200);




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


API Token auth:

Middleware:

1. create middleware
2. register it on group route middleware api array


In middleware check handle method:

$token = $request->header('X-API-TOKEN');

if($token != 'My Value'){
   about(401,'token not found');
}
return $next($request);


** check by postman:

1. set header key & value then submit with request.





::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
Guzzle Token Check:

************

Client request for access API data:

Route::get('Developerall','DeveloperController@getGuzzleRequest');

---

use GuzzleHttp\Client;

public function getGuzzleRequest(){
	$client = new Client(['http_errors' => false]);
	$allresponse = $client->request('GET','http://localhost/meeting_apps/public/api/departments', [
	    'headers' => [
		'authorization' => "after login set random token here & update token in database"
	    ]
	]);
	$allbody = $allresponse->getBody();
	$all_list = json_decode($allbody->getContents());
	return view('view',compact('all_list'));

}
    
************

Create API & Client auth check:

Use GuzzleHttp\Client;
use Illuminate\Http\Request;

Route::get('departments', function(Request $request) {
    
    $headers = $request->headers->all(); 
    // full array
    
    $pubapi = $request->header('authorization'); 
    // only token
    // now check token exits in table or not
    // if token exits then pass data.
    
    $department = Department::all();
    if(count($department) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ]; 
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $department
        ]; 
    }
    return $department;
});

___

View data :


@foreach($alldata as $alldatas)

    {{ $alldatas['name'] }}
    
@endforeach


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 
 Oauth:
 
 1. My website create a developer account with name,website name,callbackurl, it will return app id, app secret in facebook 
 	1. name 2. website name 3. callbackurl 4. client id 5. client secret
 
 2. login with facebook button send authorization request to facebook server from my server with access token & app id.
 
	<a href="https://facebook.com/oauth2/authorize?client_id=myWebsite&client_secret=123">Login with fb</a>
 
 3. After login gives a confirmation message for my website grant permission
 
 4. After grant access request accept facebook send a auth grant token to my website to access api
 
 5. Now my website send request with auth grant token for access information
 
 6. Now facebook server send api token for access resource
 
 7. Now my website request for resouce api with api token
 
 8. Now facebook send protected resource data
 
 
 
 
 
 
 
