* Service provider is a class, You can use it method in any file access by creating object.
  Its called dependency injection.
  
* whenever you want to inject a service into other services use service provider.
  Or partial view code load
  

* php artisan make:provider AwesomeServiceProvider

* The register method is the place where you register

* the boot method is the place where you can write your code & use registered services

* Add your service provider into file config/app.php
  App\Providers\AwesomeServiceProvider::class,
  After that service providers will be loaded during the bootstrapping of the Laravel application.
  
* use View;

  Schema::defaultStringLength(191);

  View::composer('*', function($view)
  {
	$view->with('menudata', category::with('subcategory','subcategory.brand')->get());
  });




______________________________





* If you've ever come across the Laravel framework, it's highly unlikely that you haven't heard of service
  containers and service providers. In fact, they're the backbone of the Laravel framework and do all the 
  heavy lifting when you launch an instance of any Laravel application.
  
* The Laravel service container is a powerful tool for managing class dependencies and performing dependency injection.

* default service providers are stored in the app/Providers directory

* Service providers are the central place to configure,register & boot setting your apps	 

* AppServiceProvider is fairly empty to configure service container bindings

* The boot() method is used to boot any routes, event listeners, or any other facades you want to add to your apps. 

  The register() method is used to bind any classes into the app container. 

* within the register method, you should only bind things & dependency injection into the service container




Create & Register Service Container :

step ->  


own class

service provider 

register custom class in provider

create facade & return facade name

add facade & provider in service container


 		
-------------------



MyApp\MyApp.php :


<?php

namespace App\MyApp;

class MyApp {

    public function sayHello($data = [])
    {
        echo "Hello World from Facade!";
    }
	
}


------------------


php artisan make:provider MyAppServiceProvider


-----------------


ADD REGISTER METHOD TO SERVICE PROVIDER CLASS :


namespace App\Providers;

use Illuminate\Support\Facades\App;

use Illuminate\Support\ServiceProvider;


class MyAppServiceProvider extends ServiceProvider{

    public function register(){
	
		// serive container
	
        App::bind('myapp', function(){		// myapp here alias
		
            return new \App\MyApp\MyApp;  	//(folder\folder\filename)
			
        });
		
    }
	
}


-----------------


// facade is a helper class. its create for get into complicated call


	App\Facades\MyApp.php


	namespace App\Facades;

	use Illuminate\Support\Facades\Facade;

	class MyApp extends Facade{

		protected static function getFacadeAccessor(){ 
		
			return 'myapp'; 						// need to call myapp when access myapp::methodname()
		
		}
		
	}



-----------------


Add service provider

App\Providers\MyAppServiceProvider::class,



Add alias

'MyApp' => App\Facades\MyApp::class



-----------------


TESTING in route :

MyApp::sayHello();



TESTING in controller :

use App\Facades\MyApp;

MyApp::sayHello();







** SOFTWARE DEVELOPMENT 






1. software process model :

	* which work will do first & which will last
	
	* timing & next step descripe on this model
	
	
2. waterfall model :

	project accept -> requirement analysic -> architec design -> detail design -> coding -> testing
  
  
  
  
  
  
  
DESIGN PATTERN :





** Design pattern make your code easy , simple , fast & secure

Some patterns are developed by senior developer :


1. Strategy Pattern :

   * 3 part -> who will send , what will send , how will send
   
   * target simply make your code dynamic. 
   
   Design :
   
		 
		
														1. SendMail
			
	User class		->notification interface		->	2. SendFax
		
														3. SendSMS
														
											
	* We have user . user will send notification.
	
	* in notification class we will decide what we will send.
	
	* in mail fax & sms we have sending functionality
	
	
2. Decorator Pattern :

	* Insert any method value without touch main class. 
	
	* Empty interface Class then full assign data in impliment
	
	
				pizza class with cost & name
						
						->
	
				Pizza_container interface class . impliment here pizza class.
				

3.  Facade Pattern :

	* easy way to access into complicated location class.
	
											ssc
											
	dhaka class ->	education			->	university
	
											phd
											
											
	* make 3 object of 3 class in education. then access it from dhaka.
	
	
4. factory pattern :

	* when object create depends on outside condition.

		like mysqliclass | oracleclass
			
		if host mysqli then mysqliclass will run otherwise oracleclass will run

5. Abstract is overwrite for child class.

6. singleton is check by static variable. if already created go to else.











