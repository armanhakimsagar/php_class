API CREATE FOR USE in get method :::::::

Route::get('userPost', function() {

    $user = user::all();
    if(count($user) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ];

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $user
        ];
    }

    return $feedback;

});



API CREATE FOR single data in get method :::::::

Route::get('departments/{id}', function($id) 

create method for edit




______


INSERT API LINK FOR IN POST METHOD :::::::


Post:

Route::post('userPost', function(Request $request) {

    $user = new User;
    $user->data = $request->data;
    $result = $user->save();

    if(count($result) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ];

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ];
    }

    return $feedback;

});

** must add 

protected $fillable = ['fieldname','fieldname']


______


UPDATE API LINK FOR IN UPDATE METHOD :::::::

Route::put('poll/{id}','control@method')


controller :

public function update(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->update(array(
			'name'=>$request->name,
		));

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "update error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "update successfully"
	]; 
    }

    return $feedback;

}



______



UPDATE API LINK FOR IN DELETE METHOD :::::::


Delete :

Route::delete('poll/{id}','control@method')

controller :

public function delete(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->delete();

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "delete error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "delete successfully"
	]; 
    }

    return $feedback;

}



:::::::::::::::::::::::::::::::


Validation for view (Only apply in edit):

$department = department::find($id);

if(is_null(ap::find($id))){
    $feedback = [
       'status'     => "error",
       'message'    => "data not found",
       'data'       => null
    ]; 
    return $feedback;
}else{
    $feedback = [
       'status'     => "success",
       'message'    => "data found",
       'data'       => ap::find($id)
    ]; 
    return $feedback;
}




:::::::::::::::::::::::::::::::


Validation for insert:


$validator = Validator::make($request->all(), [
	        
    'name'  => 'required'

]);

if ($validator->fails()) {

    return response()->json($validator->errors()->toArray(),400);
    
} else {

    $data = $request->all();
    return ap::create([
        'name' => $data['name']
    ]);

    if(count($data) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ]; 

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ]; 
    }
}




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Perfect API with customize data:


* php artisan make:controller API/PhotoController --api (api controller)

* Route::apiResource('user','API\UserController'); (api route)

* must create model , fillable & migration 

* index method or UserController for check:
 
  return User::all();
  
  Now check : http://localhost/test/public/api/user

___

Now create resource for customize data:


* php artisan make:resource User/UserResource (resource for customize data)

* in controller:
  use App\Http\Resources\User\UserResource;

* in UserResource file:

   public function toArray($request)
    {
      //dd($this);
      
      return[
        'name' => $this[0]['name'] == "data" ? '0':'1',
      ];
    }



in controller :

* use App\Http\Resources\User\UserResource;
  
* return new UserResource($User); 
 




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
	
* Side loading | one to many relationship:

Question table : id title user_id** created_at updated_at
user table     : id name password created_at updated_at 

Select all post against single user.
One to many relationship

* In user model:

  public function fetchHasOneUser(){
      return $this->hasOne(Post::class);
  }

* In user controller:

  // fetch all post from passes user_id **
  
  public function show($id){
      $user = User::find($id)->fetchHasOneUser;
      $response['user'] = $user;
      return $response;
  }


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 

Paginate API :

department::paginate(10);




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


API File show:


$user = User::find($id)->questionMethod;
$response['user'] = $user;
$response['download'] = public_path('files/'."a.png");
return $response;


on click link set download method:

return response->download(asset('imgae/a.png','Show name here'));


API File upload:

$cover_image = $request->file('photo');

$enc_cover_image = time() . '.' . $cover_image->getClientOriginalExtension();

$destinationPath = public_path('files');

$cover_image->move($destinationPath, $enc_cover_image);


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

 
Guzzle Token Check:

************

guzzle install:

composer require guzzlehttp/guzzle

---

// client side ---------------------------------------------
// set route for get data from remote api from client side

Route::get('Developerall','DeveloperController@getGuzzleRequest');


// set method & header for get data from remote api from client side

  public function getGuzzleRequest(Request $request){

      $client = new Client(['http_errors' => false]);
    	$allresponse = $client->request('GET','http://localhost/test/public/api/user', [
    	    'headers' => [
    		      'authorization_token' => "54rwerf345t3"
    	    ]
    	]);

      $allbody = $allresponse->getBody();

    	$all_list = json_decode($allbody->getContents(),true);
      // check response in here
      if($all_list[0] != "authorization error"){
    	   return view('view',compact('all_list'));
      }else{
        return $all_list;
      }
  }


// developer side here-----------------------------------------

// as a developer check api token header in public/api/user this route

public function index(Request $request)
{
// in developer side check header request from client
  $headers = $request->headers->all();
  $pubapi = $request->header('authorization_token');

// check header requset with database, if match send data
  if($pubapi != ""){
    $user =  User::all();
    return $user;
  }else{
    $feedback = ['authorization error'];
    return $feedback;
  }
}


// view for client --------------------------------------------

<?php foreach ($all_list as $key => $value) {
  echo $value['name'];
} ?>


************

* Client auth check:

Use GuzzleHttp\Client;
use Illuminate\Http\Request;

Route::get('departments', function(Request $request) {
    
    $headers = $request->headers->all(); 
  
    $pubapi = $request->header('authorization'); 
    
    $department = Department::all();
    if(count($department) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ]; 
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $department
        ]; 
    }
    return $department;
});

___

View data :


@foreach($alldata as $alldatas)

    {{ $alldatas['name'] }}
    
@endforeach

---

use GuzzleHttp\Client;

public function getGuzzleRequest(){
	$client = new Client(['http_errors' => false]);
	$allresponse = $client->request('GET','http://localhost/meeting_apps/public/api/departments', [
	    'headers' => [
		'authorization' => "after login set random token here & update token in database"
	    ]
	]);
	$allbody = $allresponse->getBody();
	$all_list = json_decode($allbody->getContents());
	return view('view',compact('all_list'));
}


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 
 Oauth:
 
 https://github.com/armanhakimsagar/Oauth
 
 
::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 Create API Here  -http://editor.swagger.io/

Then just export -> generate client -> html2 

