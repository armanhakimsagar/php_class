API CREATE ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


View:

Route::get('departments', function() {
    
    $department = department::all();
    if(count($department) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ]; 
       
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $department
        ]; 
    }
    
    return $feedback;
    
});


______

Edit:

Route::get('departments/{id}', function($id) 


______

Post:

Route::post('departments', function(Request $request) {

    $department = department::create($request->all);
    
    if(count($department) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ]; 
       
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ]; 
    }
    
    return $feedback;
    
});

** add 

protected $fillable = ['fieldname','fieldname']


______

Update 

Route::put('poll/{id}','control@method')

controller :

public function(Request $request,Poll $poll) {

   $poll = $poll->update($request->all());
   
   if(count($poll) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "update error"
        ]; 
       
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "update successfully"
        ]; 
    }
    
    return $feedback;

}

______

Delete 


Route::delete('poll/{id}','control@method')

controller :

public function(Request $request,Poll $poll) {

   $poll = $poll->delete();
   
   if(count($poll) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "update error"
        ]; 
       
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "update successfully"
        ]; 
    }
    
    return $feedback;

}


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



Validation for view:

$department = department::find($id);

if(is_null($department)){
  return .........
}else{
  return ............
}


Validation for insert:

$this->validate($request, [

   'name' 	=> 'required'
        
]);

if ($validator->fails()) {
       return response()->json($validator->errors,400);
} else {
       $feedback = [
           'status'     => "success",
           'message'    => "update successfully"
       ];
       return $feedback;
}







::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Customize response:

laravel have resourse for customize api response

* php artisan make:resourse CustomResourse


* set this method in resourse

public function toArray($request){
  return [
    'title' => mb_strimwidth($this->title,0,5,'....'),
  ]
}

* now use this resourse in your api controller
 
 use App\Http\Resourse\CustomResourse as newCustomResourse;
 
 in method :
 
 new newCustomResourse(data::findOrFail($id));
 
 


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 
API Resouse create:

* php artisan make:controller QuestionController --resourse --model=Question

api.php

* route::apiResourse('Questions','QuestionsController');

[it create standard resourse for api]

* Now check by:

apc.com/api/questions
