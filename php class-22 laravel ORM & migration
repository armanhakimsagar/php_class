Migrations are like version control for your database, 
allowing your team to easily modify and share the application's database schema. 

To create a migration, use the make:migration Artisan command:


* Create Index by defaultStringLength :
  
  https://laravel.com/docs/master/migrations#creating-indexes

  app\provider\appserviceprovider.php :

  use Illuminate\Support\Facades\Schema;

  public function boot(){
  
    Schema::defaultStringLength(191);
  
  }
  
  
  
  
* php artisan make:migration create_users_table

Schema::create('flights', function (Blueprint $table) {

   $table->increments('id');
   $table->string('name',100);
   $table->string('airline',100);
   $table->timestamps();

});


php artisan migrate


Schema::create('drinks', function (Blueprint $table) {

   $table->increments('id');
   $table->string('name',75)->unique();
   $table->text('comments')->nullable();
   $table->integer('rating');
   $table->date('brew_date');
   $table->timestamps();        
            
});
            
 
* php artisan migrate:rollback

* php artisan make:migration employees



$table->bigInteger('votes');
$table->boolean('confirmed'); 
$table->char('name', 4); 
$table->date('dob'); 
$table->dateTime('post'); 
$table->float('amount', 8, 2);
$table->increments('id');
$table->integer('votes');
$table->ipAddress('visitor');
$table->longText('description');
$table->mediumInteger('numbers');
$table->mediumText('description');
$table->smallInteger('votes');
$table->softDeletes();
$table->string('name', 100);


* php artisan make:model Post -m (for model & migration)

* php artisan tinker

 >> 5+18
 
 >> echo 'ok'
 
 >> App\modelname::count()  [show total row]
 
_________

 
 >> $post = new App\post(); [create object of model]
 
 >> $post->column_name = "value 1";
 
 >> $post->save();       [for save]
 
 
_________

 
 >> $post = new App\post(); [create object of model]
 
 >> $post->column_name = "value 2";
 
 >> $post->save();       [for save]
 

___________

DB::table('songs')->get();

DB::table('songs')->where('id',10)->get();



___________


Resouse Controller:

php artisan make:controller songController --resoruse

Route::resoruse('songs','songController');

php artisan route:list



_____________________________________

MODEL ::::::::::::::::::::::::::::::

:::::::::::::::::

Mass assignment 

protected $table = "users" ;   // set table name here

protected $fillable = ['name','email']; 

// fillable need for mass assignment, if column not specified when insert

like : $input = input:all(); $cus = new customer($input); $cus->save(); 

protected $fillable = []; // insert not allow

protected $guarded = ['id','created_at','updated_at']; // insert not allow thoese column

protected $guarded = []; // insert allow

protected $hidden = ['password']  // not show when fetch in json

-> return json_encode(User::all()); die();

protected $dates[] = ['created_at'] 

//just a way of automatically casting the dates to a 
//carbon object when you get them from the model.

protected $primaryKey = 'employer_id';


_____________


HasOne  		one to one (user & user_roll table)
Hasmany 		one to many (post userid)  | in foreach loop
belongsToMany		many to one (One product order by many user)
easer loading		Query optimization for one to many relationship


_____________

ONE TO ONE :::::::::::::::::::::::::::::::::::::::::::

use App\User;

Route::get('/',function(){
	$data = User::find(1);
	
	dd($data->OrderUser->roll_id);

	return view('welcome');
});

user model:



* Method:

public function OrderUser(){

   return $this->hasOne(order::class);

}




_______________

ONE TO MANY :::::::::::::::::::::::::::::::::::::::


All same just need loop & hasmany

* In user model:

public function PostOfUser(){

  return $this->hasMany(Post::class);

}


** View file:

foreach($data->PostOfUser as $datas){

   echo $datas->title;

};




_______________


Many to one :::::::::::::::::::::::::::::::::::


All same just many to one


use App\order;

Route::get('/userlist',function(){
	$data = order::find(1);
	
	dd($data->user);
});


user model:


* Method:

public function user(){

   return $this->belongsTo('App\User');

}



_______________


EASER LOADING ::::::::::::::::::::::::::

* its for query optimization in one to many relationship
* for testing need to download package laravel debuger

* set laravel debuger for result

* composer require barryvdh/laravel-debugbar --dev

* set config/app.php:

   Barryvdh\Debugbar\ServiceProvider::class,
  'Debugbar' => Barryvdh\Debugbar\Facade::class,

* run:

  php artisan vendor:publish --provider="Barryvdh\Debugbar\ServiceProvider"

* Need to set APP_DEBUG=true in .env file

* composer dump-autoload

* must have a return view for work with debug interface









______________________________________________________





many to many    (user_id & role_id in roles table):

roles table 	: id role_id , user_id


naming convention: role_user table , user_id & role_id


Create:

* user model
* role model


CREATE TABLE role_user(
 id int not null PRIMARY KEY AUTO_INCREMENT,
 user_id int not null,
 role_id int not null,
 created_at timestamp,
 updated_at timestamp
)


user model:

public function roles(){
  $this->belongToMany('Role')
}

user controller:


  public function index($id){
  
    $user = User::find($id);
    return view('view',compact('user'));
  
  }

in view:

@foreach($users->roles as $role)
	{{ $role->name }}
@endforeach



_______________


In method get userid::::::::::::::::::::::::::
(see username beside question title)

public function index(){
    $data = Question::all();
    return view('view',compact('data'));
}

In model:

 public function getPosterUserName(){
     return User::where('id',$this->user_id)->first()->name;
}


In view:



<?php foreach ($data as $key => $value): ?>
    {{ $value->getPosterUserName() }}
<?php endforeach; ?>

:::::::::::::::::::

Accessor & mutator


Customize any column value when fetch data from model.
Create accessor in model.

public function getNameAttribute($value){
  return ucwords($value);
}

public function setNameAttribute($value){
  $this->attributes['name'] = ucwords($value);
}



:::::::::::::::::

Set Reuse method in model :

** Check user active or not,

** in user method:

// here scope is prefix

public function scopeActiveCheck($query){
  return $query->where('status','1');
}

** in controller:

User::ActiveCheck()->get();




:::::::::::::::::

Set trait in method:

namespace App\Trait;

trait modelTrait{
   
	public function scopeActiveCheck($query){
		 return $query->where('user_id','1');
	}
}


in model:

use  App\Trait\modelTrait;

class {
  use modelTrait;
  
}
