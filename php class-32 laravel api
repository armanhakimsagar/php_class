API CREATE ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


View:

Route::get('departments', function() {
    
    $department = department::all();
    if(count($department) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "data not found",
           'data'       => null
        ]; 
       
    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "data found",
           'data'       => $department
        ]; 
    }
    
    return $feedback;
    
});


______

Edit:

Route::get('departments/{id}', function($id) 

create method for edit

______

Post:

Route::post('departments', function(Request $request) {

    $data = $request->all();
    
    return ap::create([
        'name' => $data['name']
    ]);

    if(count($data) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ]; 

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ]; 
    }
    
});

** must add 

protected $fillable = ['fieldname','fieldname']


______


Update :

Route::put('poll/{id}','control@method')


controller :

public function update(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->update(array(
			'name'=>$request->name,
		));

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "update error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "update successfully"
	]; 
    }

    return $feedback;

}



______



Delete :


Route::delete('poll/{id}','control@method')

controller :

public function delete(Request $request,$id) {

   $poll = DB::table('aps')
		->where('id',$id)
		->delete();

   if($poll == null){
       $feedback = [
	   'status'     => "error",
	   'message'    => "delete error"
	]; 

    }else{
	$feedback = [
	   'status'     => "success",
	   'message'    => "delete successfully"
	]; 
    }

    return $feedback;

}



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



Validation for view:

$department = department::find($id);

if(is_null(ap::find($id))){
    $feedback = [
       'status'     => "error",
       'message'    => "data not found",
       'data'       => null
    ]; 
    return $feedback;
}else{
    $feedback = [
       'status'     => "success",
       'message'    => "data found",
       'data'       => ap::find($id)
    ]; 
    return $feedback;
}


Validation for insert:


$validator = Validator::make($request->all(), [
	        
    'name'  => 'required'

]);

if ($validator->fails()) {

    return response()->json($validator->errors()->toArray(),400);
    
} else {

    $data = $request->all();
    return ap::create([
        'name' => $data['name']
    ]);

    if(count($data) == 0){
       $feedback = [
           'status'     => "error",
           'message'    => "insert error"
        ]; 

    }else{
        $feedback = [
           'status'     => "success",
           'message'    => "inserted successfully"
        ]; 
    }
}




::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



Customize response:

laravel have resourse for customize api response

* php artisan make:resourse CustomResourse


* set this method in resourse

public function toArray($request){
  return [
    'title' => mb_strimwidth($this->title,0,5,'....'),
  ]
}

* now use this resourse in your api controller
 
 use App\Http\Resourse\CustomResourse as newCustomResourse;
 
 in method :
 
 new newCustomResourse(data::findOrFail($id));
 
 


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 
 
 
API Resouse create:

* php artisan make:controller QuestionController --resourse --model=Question

api.php

* route::apiResourse('Questions','QuestionsController');

[it create standard resourse for api]

* Now check by:

apc.com/api/questions


* inside method everthing same



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


Side loading | one to many relationship:

side load is load foreign key data in api.
like load all questions of a poll.

in poll model:

public function questions(){
  return hasMany('App\Quesion');
}


in poll controller:

public function show($id){

  $poll = Poll::with('questions')->findOrFail($id);
  $response['poll'] = $poll;
  $response['questions'] = $poll->questions;
  return response->json($response,200);
  
}



::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
 


